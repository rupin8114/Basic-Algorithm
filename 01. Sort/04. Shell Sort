#include <iostream>

void shell_sort(int *arr, int n);
void insertion_sort(int *arr, int first, int last, int gap);

int main() {
  int length;
  printf("정렬할 숫자의 개수를 입력해주세요 : ");
  scanf("%d", &length);
  printf("\n정렬할 숫자들을 입력해주세요\n");

  //입력
  int *arr = (int *)malloc(sizeof(int) * length);
  for (int i = 0; i < length; i++) {
    scanf("%d", &arr[i]);
  }

  //셸 정렬
  shell_sort(arr, length);

  //출력
  for (int i = 0; i < length; i++) {
    printf("%d ", arr[i]);
  }
  
  free(arr);

  return 0;
}
/*
부분리스트를 띄엄띄엄 만들어서 자료가 삽입될 때 비교적 자신의 정렬된 위치와 비슷한 곳에 미리 정렬되어 있게 한다.
gap을 점점 줄여서 어느 순간 1이 되어 삽입정렬과 같게 하되, gap이 홀수일 때 성능이 더 좋다고 한다.
*/
void shell_sort(int *arr, int n) {
  int gap = n;
  int i;
  while (gap > 1) {
    gap = gap / 2;
    if ((gap % 2) == 0)
      gap = gap + 1;
    for (i = 0; i < gap; i++) {
      insertion_sort(arr, i, n, gap);
    }
  }
}

void insertion_sort(int list[], int first, int last, int gap){
  int i, j, key;

  for(i=first+gap; i<last; i=i+gap){
    key = list[i];
    
    for(j=i-gap; j>=first && list[j]>key; j=j-gap){
      list[j+gap] = list[j];
    }

    list[j+gap] = key;
  }
}
