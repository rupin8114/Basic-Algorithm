#include <iostream>

void merge_sort(int *arr, int left, int right);
void merge(int *arr, int left, int mid, int right);

int main() {
  int length;
  printf("정렬할 숫자의 개수를 입력해주세요 : ");
  scanf("%d", &length);
  printf("\n정렬할 숫자들을 입력해주세요\n");

  //입력
  int *arr = (int *)malloc(sizeof(int) * length);
  for (int i = 0; i < length; i++) {
    scanf("%d", &arr[i]);
  }

  //병합 정렬
  merge_sort(arr, 0, length - 1);

  //출력
  for (int i = 0; i < length; i++) {
    printf("%d ", arr[i]);
  }

  free(arr);

  return 0;
}

/*
재귀적으로 호출하여 최소단위까지 분할하고, 다시 병합하는 과정이다.
사실상 merge_sort함수는 분할하는 과정이 메인이라고 할 수 있다.
*/

void merge_sort(int *arr, int left, int right) {
  int mid;

  if (left < right) {
    mid = (left + right) / 2;

    merge_sort(arr, left, mid);
    merge_sort(arr, mid + 1, right);
    merge(arr, left, mid, right);
  }
}

/*
merge에서 분할되어 있던 배열들을 다시 합친다.
"여기"의 부등호를 바꿔주면 오름차순이 아니라 내림차순으로 정렬된다.
*/

void merge(int *arr, int left, int mid, int right) {
  int i, j;
  i = left;
  j = mid + 1;
  int *temp = (int *)malloc(sizeof(int) * (right - left + 1));
  int k = 0;

  while (i <= mid && j <= right) {
    if (arr[i] <= arr[j]) //여기
      temp[k++] = arr[i++];
    else
      temp[k++] = arr[j++];
  }

  if (j > right)
    for (i = i; i <= mid; i++)
      temp[k++] = arr[i];
  else
    for (j = j; j <= right; j++)
      temp[k++] = arr[j];

  for (k = 0; k < right - left + 1; k++) {
    arr[left + k] = temp[k];
  }

  free(temp);

  return;
}
