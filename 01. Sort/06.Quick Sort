#include <iostream>

void quick_sort(int *arr, int left, int right, int length);

int main() {
  int length;
  printf("정렬할 숫자의 개수를 입력해주세요 : ");
  scanf("%d", &length);
  printf("\n정렬할 숫자들을 입력해주세요\n");

  //입력
  int *arr = (int *)malloc(sizeof(int) * length);
  for (int i = 0; i < length; i++) {
    scanf("%d", &arr[i]);
  }

  //퀵 정렬
  quick_sort(arr, 0, length - 1, length);

  //출력
  for (int i = 0; i < length; i++) {
    printf("%d ", arr[i]);
  }

  free(arr);

  return 0;
}

/*
배열의 가장 왼쪽을 pivot으로 하여 작은 수와 큰 수들로 비균등 분할하여
정렬한다. 이때, pivot은 항상 바뀌지 않는 제 위치에 오므로 이를 제외하고
다시 정렬해준다.
*/

void quick_sort(int *arr, int left, int right, int length){
  int temp;
  if(right-left==1){
    if(arr[right]<arr[left]){
      temp = arr[right];
      arr[right] = arr[left];
      arr[left] = temp;
    }
    return;
  }
  else if(right <= left) return;
  else{}
  
  int pivot = arr[left];
  int low = left+1;
  int high = right;

  while(low<high){
    while(arr[low] < pivot && low+1 <= right)
      low++;
    while(arr[high] > pivot && high-1 >= left)
      high--;

    if(low<=high){
      temp = arr[low];
      arr[low] = arr[high];
      arr[high] = temp;
    }
  }
  
  temp = arr[high];
  arr[high] = arr[left];
  arr[left] = temp;

  for (int i = 0; i < length; i++) {
    printf("%d ", arr[i]);
  }
  printf("\n");

  quick_sort(arr,left,high-1,length);
  quick_sort(arr,low,right,length);
}
